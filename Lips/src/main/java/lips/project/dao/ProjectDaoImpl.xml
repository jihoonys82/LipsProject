<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="lips.project.dao.ProjectDao">
 
 	<!-- 카테고리 인서트 -->
 	<insert id="inCate" parameterType="lips.issue.dto.IssueCategoryDto">
 	INSERT INTO issue_category 
 	VALUES (#{projectId},#{categoryAssetId},#{categoryOrder})
 	
 	
 	
 	</insert>

	
	<!-- 카테고리 지우기  -->
	<delete id ="delCate" parameterType="int">
	delete issue_category WHERE projectId=#{value}
	
	</delete>

	 <!--  모든 카테고리 에셋 불러오기-->
	 <select id ="selAllcate" resultType="lips.issue.dto.CategoryAssetDto">
	 select * from category_asset order by categoryAssetId
	 </select>
 	
 	<!--  나의 카테고리에셋 불러오기-->
 	<select id="selIssueCateAs" parameterType="lips.project.dto.ProjectDto" resultType="lips.issue.dto.CategoryAssetDto">
 	select Ca.CATEGORYASSETID, Ca.ASSETNAME, Ca.ASSETCODE, Ca.ASSETDESCRIPTION, Ic.CATEGORYORDER FROM category_asset Ca, issue_category Ic 
WHERE Ca.categoryassetid = Ic.categoryassetid and Ic.projectId=#{projectId} ORDER BY categoryorder

 	</select>
 	
 	
 	<!-- 리더위임 -->
 	<update id ="upProLeader"  parameterType="lips.project.dto.ProjectDto" >
 	UPDATE projectinfo SET projectleader = #{userId} WHERE projectId=#{projectId}
 	</update>
 	
 	
 	
 	<!-- 프로젝트 종료(프로젝트 스테이터스 close처리 -->
 	<update id ="UpProStatus"  parameterType="lips.project.dto.ProjectDto" >
 	UPDATE projectinfo SET status = 'CLOSE' WHERE projectId=#{projectId}
 	</update>
 	
 	
 	<!-- 몰라  -->
 	<select id="selInvitebyProid" parameterType="lips.project.dto.ProjectDto" resultType="lips.project.dto.ProjectinvitecodeDto">
 	SELECT * FROM Project_invitation WHERE projectId=#{projectId}
 	
 	</select>
 	
 	<!-- 프로젝트 초대코드 업데이트 -->
 	<update id="upProinvite" parameterType="hashmap">
 	UPDATE Project_invitation set invitecode = #{invitecode}, expirydate = sysdate+1 
 	WHERE projectId=#{projectId}
 	</update>
 
 	
 	
 	<!-- 프로젝트 업데이트  -->
 	<update id="upPro" parameterType="lips.project.dto.ProjectDto">
 		UPDATE projectinfo SET 
 		projectName = #{projectName}
 		,projectKey = #{projectKey}
 		,status = #{status}
 		,projectOpen = #{projectOpen}
 		WHERE projectId=#{projectId}
 	
 	</update>
  	
 	
 	
 	<!-- 프로젝트 멤버 업데이터(자발적으로 프로젝트 탈퇴한 이용자가 재가입) -->
 	<update id="upPromember" parameterType="lips.project.dto.ProjectMemberDto">
		UPDATE project_member SET userlevel = 1 where userid = #{userId} 
		AND projectId=#{projectId} 
 	</update>
 	
 	
 		
 	<!-- 프로젝트 멤버 업데이트( 레벨 변경 강퇴해제)  -->
 	<update id="upPromemberLevelUp" parameterType="lips.project.dto.ProjectMemberDto">
 		UPDATE project_member SET userlevel = 1 WHERE userid = #{userId} 
		AND projectId=#{projectId}
		
 	  <selectKey keyProperty="userLevel" resultType="Integer" order="AFTER">
 	  SELECT userlevel FROM project_member where userid = #{userId} 
		AND projectId=#{projectId}
       </selectKey>
 	
 	</update>
 	
 	
 	
 	<!-- 프로젝트 멤버 업데이트( 레벨 변경 강퇴)  -->
 	<update id="upPromemberLevelDown" parameterType="lips.project.dto.ProjectMemberDto">
 		UPDATE project_member SET userlevel = 0 WHERE userid = #{userId} 
		AND projectId=#{projectId}
		
 	  <selectKey keyProperty="userLevel" resultType="Integer" order="AFTER">
 	  SELECT userlevel FROM project_member where userid = #{userId} 
		AND projectId=#{projectId}
       </selectKey>
 	</update>
 	
 	
 	
 	<!-- 프로젝트 멤버테이블만 조회 (파라미터 - 프로젝트DTO(프로젝트아이디)  -->
 	<select id="selProOnlyMember" parameterType="lips.project.dto.ProjectDto" resultType="lips.project.dto.ProjectMemberDto"> 
 	SELECT * FROM project_member WHERE projectId=#{projectId}
 	</select>
 
 
 	<!-- 프로젝트 조회(프로젝트 아이디를 바탕으로) -->
 	<select id="selProbyProId" parameterType="String" resultType="lips.project.dto.ProjectDto">
 	SELECT * FROM projectinfo WHERE projectId=#{projectId}
 	
 	</select>
 
 
 	<!--프로젝트 조회 (초대 코드를 바탕으로)  -->
 	<select id="selProbyinvite" parameterType="lips.project.dto.ProjectDto" resultType="lips.project.dto.ProjectDto">
 	SELECT * FROM project_member pm, project_invitation pi
	WHERE pm.PROJECTID = pi.PROJECTID AND INVITECODE=#{invitecode}
 	</select>
 	
 	
 	
 	<!-- 프로젝트 조회(유저정보를 바탕으로) -->
 	<select id="selPro" parameterType="lips.userinfo.dto.User" resultType="lips.project.dto.ProjectDto">
 		SELECT * FROM projectinfo pf, project_member pm
	WHERE pf.PROJECTID = pm.PROJECTID AND USERID=#{userId} AND pm.USERLEVEL>=1
 	</select>
 	
 	<!-- 프로젝트 멤버 조회 -->
 	<select id="selProMember" parameterType="lips.project.dto.ProjectDto" resultType="lips.userinfo.dto.User">
 		SELECT ui.userId,ui.email,ui.createdate,ui.nick,ui.blocked,ui.userlevel,ui.phone,ui.birth FROM project_member pm, userinfo ui
 		WHERE pm.userId = ui.userId
 		AND pm.projectId=#{projectId}
 	</select>
 	
 	<!-- 프로젝트 인서트 -->
 	<insert id="inPro" parameterType="lips.project.dto.ProjectDto">
 	
 		INSERT INTO projectinfo 
 		(projectId,projectName,projectKey,projectOpen,projectCreater,projectLeader,closeDate,status,projectDesc) 
 		VALUES 
 		(project_SEQ.NEXTVAL,#{projectName},#{projectKey},#{projectOpen},#{projectCreater},#{projectCreater},#{closeDate},'OPEN',#{projectDesc} )
 	
 	
 	<!-- 셀렉트키   -->
 	<!-- 파라미터타입(dto)의  변수(projectId)에 리절트타입(Interger)로 값을 반환   -->
 	  <selectKey keyProperty="projectId" resultType="Integer" order="AFTER">
 	  SELECT project_SEQ.CURRVAL FROM dual
       </selectKey>
 	</insert>
 	
 	
 	<!-- 프로젝트 멤버 인서트 ( 프로젝트 인서트와 동시에 실행 or 초대코드 입력시 실행) -->
 	<insert id="inProMember" parameterType="hashmap">

 		INSERT INTO project_member 
 		(projectId,userId,userLevel) VALUES
 		(#{projectId},#{user.userId},1 )
 	
 	</insert>
 	
 	<!-- 프로젝트 카테코리 인서트 ( 프로젝트 인서트와 동시에 실행) -->
 	<insert id="inProct" parameterType="lips.project.dto.ProjectDto">
		INSERT INTO issue_category VALUES(#{projectId}, 1, 1)
 	
 	</insert>
 	
 	<!-- 프로젝트 초대코드 인서트( 프로젝트 인서트와 동시에 실행)  -->
 	<insert id="inProic" parameterType="hashmap">

 		INSERT INTO Project_invitation 
 		(projectId, invitecode) VALUES
 		(#{projectId},#{invitecode} )
 	
 	
<!--  		셀렉트키//   파라미터가 해쉬맵땐 어떻게 받아오지?? -->
 	<!-- 파라미터타입(hashmap)의 변수(projectId)에 리절트타입(String)로 값을 반환   -->
<!--  	  <selectKey keyProperty="invitecode" resultType="String" order="AFTER"> -->
<!--  	  SELECT INVITECODE FROM Project_invitation WHERE projectId=#{projectId}  -->
<!--        </selectKey> -->
 	
 	</insert>
 	
 	
 	<!-- 유저아이디를 바탕으로  인비테이션 테이블 조회-->
 	<select  id="invitecheck" parameterType="hashmap" resultType="lips.project.dto.ProjectinvitecodeDto">
 		SELECT * FROM project_member pm, project_invitation pi
	WHERE pm.projectid=pi.projectid AND userid=#{userid} AND INVITECODE=#{invitecode}
 
 	</select>
 	
 	<!--  초대코드를 바탕으로 인비테이션 테이블 조회-->
 	<select  id="inviteTimecheck" parameterType="lips.project.dto.ProjectDto" resultType="lips.project.dto.ProjectinvitecodeDto">
 		SELECT * FROM project_invitation
	WHERE INVITECODE=#{invitecode}
 	</select>
 	
 
 	<select id="totalCount" resultType="int">
 		SELECT COUNT(*) FROM projectinfo
 	</select>
 	
	<select id="allProjectPage" parameterType="lips.utils.Paging" resultType="lips.project.dto.ProjectDto">
	
		SELECT * FROM
		(SELECT rownum rnum, P.* FROM
		(SELECT * FROM projectinfo 
		WHERE STATUS='OPEN' 
		ORDER BY projectid DESC)
		P ORDER BY rnum)
		WHERE rnum BETWEEN #{startNo} AND #{endNo}
	</select>
 	
 	
 </mapper>